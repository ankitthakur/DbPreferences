apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'digital.wup.android-maven-publish'
String dbPrefsVersionName = "2.0"
android {
    compileSdkVersion defaultCompileSdkVersion

    defaultConfig {
        minSdkVersion defaultMinSdkVersion
        targetSdkVersion defaultTargetSdkVersion
        versionCode 1
        versionName dbPrefsVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        // For Instrumentation Unit testing
        consumerProguardFile('proguard-rules.pro')
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
}

publishing {
    publications {
        mavenAar(MavenPublication) {
            groupId = 'com.github.hannesa2'
            artifactId = 'DbPreferences'
            version = dbPrefsVersionName
            from components.android
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.code.gson:gson:2.8.5'

    // room
    implementation "com.commonsware.cwac:saferoom:0.4.4"
    implementation "android.arch.persistence.room:runtime:$room"
    kapt "android.arch.persistence.room:compiler:$roomruntime"
    implementation "android.arch.persistence.room:rxjava2:$room"

    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'

    lintChecks project(':DBPrefs-lint')

    testImplementation 'junit:junit:4.12'
    androidTestImplementation "android.arch.persistence.room:testing:$room"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

// https://medium.com/@hamen/android-library-aar-and-javadoc-6859898cad28
task javadoc(type: Javadoc) {
    failOnError true
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'

    include("**/IDbPreferences.java")
}

artifacts {
    archives sourcesJar
}