apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'digital.wup.android-maven-publish'
String dbPrefsVersionName="2.0"
android {
    compileSdkVersion defaultCompileSdkVersion
    buildToolsVersion defaultBuildToolsVersion

    defaultConfig {
        minSdkVersion defaultMinSdkVersion
        targetSdkVersion defaultTargetSdkVersion
        versionCode 1
        versionName dbPrefsVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner" // For Instrumentation Unit testing
        consumerProguardFile('proguard-rules.pro')
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
}

publishing {
    publications {
        mavenAar(MavenPublication) {
            groupId = 'com.github.hannesa2'
            artifactId = 'DbPreferences'
            version = dbPrefsVersionName
            from components.android
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.code.gson:gson:2.8.5'

    // room
    implementation "com.commonsware.cwac:saferoom:0.4.4"
    implementation "android.arch.persistence.room:runtime:$room"
    kapt "android.arch.persistence.room:compiler:$roomruntime"
    implementation "android.arch.persistence.room:rxjava2:$room"

    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'

    lintChecks project(':DBPrefs-lint')

    testImplementation 'junit:junit:4.12'
    androidTestImplementation "android.arch.persistence.room:testing:$room"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

task javadoc(type: Javadoc) {
    failOnError = false
    exclude "**/internal/**"
    exclude "**/test/**"
    exclude "**/jmh/**"
    options {
        windowTitle = "RxJava Javadoc ${project.version}"
    }
    // Clear the following options to make the docs consistent with the old format
    options.addStringOption("top").value = ""
    options.addStringOption("doctitle").value = ""
    options.addStringOption("header").value = ""
    options.stylesheetFile = new File(projectDir, "gradle/stylesheet.css");

    options.links(
            "https://docs.oracle.com/javase/7/docs/api/"
//            , "http://host/urls-${dbVersion}-javadoc/"
    )

    if (JavaVersion.current().isJava7()) {
        // "./gradle/stylesheet.css" only supports Java 7
        options.addStringOption("stylesheetfile", rootProject.file("./gradle/stylesheet.css").toString())
    }
}

//task sourcesJar(type: Jar, dependsOn: classes) {
//    classifier = "sources"
//    from sourceSets.main.allSource
//}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

artifacts {
//    archives jar
//    archives sourcesJar
    archives javadocJar
}

//task jar {
//    manifest {
//        name = "rxjava"
//        instruction "Bundle-Vendor", "DbPreferences Contributors"
//        instruction "Bundle-DocURL", "https://github.com/hannesa2/DbPreferences"
//        instruction "Import-Package", "!org.junit,!junit.framework,!org.mockito.*,!org.testng.*,*"
//        instruction "Eclipse-ExtensibleAPI", "true"
//        instruction "Automatic-Module-Name", "info.dbprefs.lib"
//    }
//}

